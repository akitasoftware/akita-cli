// Code generated by MockGen. DO NOT EDIT.
// Source: ./cliv2/rest/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	rest "github.com/akitasoftware/akita-cli/rest"
	context "context"
	akid "github.com/akitasoftware/akita-libs/akid"
	api_schema "github.com/akitasoftware/akita-libs/api_schema"
	path_trie "github.com/akitasoftware/akita-libs/path_trie"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLearnClient is a mock of LearnClient interface
type MockLearnClient struct {
	ctrl     *gomock.Controller
	recorder *MockLearnClientMockRecorder
}

// MockLearnClientMockRecorder is the mock recorder for MockLearnClient
type MockLearnClientMockRecorder struct {
	mock *MockLearnClient
}

// NewMockLearnClient creates a new mock instance
func NewMockLearnClient(ctrl *gomock.Controller) *MockLearnClient {
	mock := &MockLearnClient{ctrl: ctrl}
	mock.recorder = &MockLearnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLearnClient) EXPECT() *MockLearnClientMockRecorder {
	return m.recorder
}

// ListLearnSessions mocks base method
func (m *MockLearnClient) ListLearnSessions(arg0 context.Context, arg1 akid.ServiceID, arg2 map[string]string) ([]*api_schema.LearnSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLearnSessions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api_schema.LearnSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLearnSessions indicates an expected call of ListLearnSessions
func (mr *MockLearnClientMockRecorder) ListLearnSessions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLearnSessions", reflect.TypeOf((*MockLearnClient)(nil).ListLearnSessions), arg0, arg1, arg2)
}

// GetLearnSession mocks base method
func (m *MockLearnClient) GetLearnSession(arg0 context.Context, arg1 akid.ServiceID, arg2 akid.LearnSessionID) (*api_schema.LearnSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearnSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api_schema.LearnSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearnSession indicates an expected call of GetLearnSession
func (mr *MockLearnClientMockRecorder) GetLearnSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearnSession", reflect.TypeOf((*MockLearnClient)(nil).GetLearnSession), arg0, arg1, arg2)
}

// CreateLearnSession mocks base method
func (m *MockLearnClient) CreateLearnSession(arg0 context.Context, arg1 *api_schema.APISpecReference, arg2 string, arg3 map[string]string) (akid.LearnSessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLearnSession", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(akid.LearnSessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLearnSession indicates an expected call of CreateLearnSession
func (mr *MockLearnClientMockRecorder) CreateLearnSession(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLearnSession", reflect.TypeOf((*MockLearnClient)(nil).CreateLearnSession), arg0, arg1, arg2, arg3)
}

// ReportWitnesses mocks base method
func (m *MockLearnClient) ReportWitnesses(arg0 context.Context, arg1 akid.LearnSessionID, arg2 []*api_schema.WitnessReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportWitnesses", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportWitnesses indicates an expected call of ReportWitnesses
func (mr *MockLearnClientMockRecorder) ReportWitnesses(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportWitnesses", reflect.TypeOf((*MockLearnClient)(nil).ReportWitnesses), arg0, arg1, arg2)
}

// CheckpointLearnSession mocks base method
func (m *MockLearnClient) CheckpointLearnSession(arg0 context.Context, arg1 akid.LearnSessionID) (akid.APISpecID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckpointLearnSession", arg0, arg1)
	ret0, _ := ret[0].(akid.APISpecID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckpointLearnSession indicates an expected call of CheckpointLearnSession
func (mr *MockLearnClientMockRecorder) CheckpointLearnSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckpointLearnSession", reflect.TypeOf((*MockLearnClient)(nil).CheckpointLearnSession), arg0, arg1)
}

// CreateSpec mocks base method
func (m *MockLearnClient) CreateSpec(arg0 context.Context, arg1 string, arg2 []akid.LearnSessionID, arg3 rest.CreateSpecOptions) (akid.APISpecID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(akid.APISpecID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpec indicates an expected call of CreateSpec
func (mr *MockLearnClientMockRecorder) CreateSpec(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpec", reflect.TypeOf((*MockLearnClient)(nil).CreateSpec), arg0, arg1, arg2, arg3)
}

// GetSpec mocks base method
func (m *MockLearnClient) GetSpec(arg0 context.Context, arg1 akid.APISpecID, arg2 rest.GetSpecOptions) (api_schema.GetSpecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpec", arg0, arg1, arg2)
	ret0, _ := ret[0].(api_schema.GetSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpec indicates an expected call of GetSpec
func (mr *MockLearnClientMockRecorder) GetSpec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockLearnClient)(nil).GetSpec), arg0, arg1, arg2)
}

// GetSpecVersion mocks base method
func (m *MockLearnClient) GetSpecVersion(arg0 context.Context, arg1 string) (api_schema.APISpecVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecVersion", arg0, arg1)
	ret0, _ := ret[0].(api_schema.APISpecVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecVersion indicates an expected call of GetSpecVersion
func (mr *MockLearnClientMockRecorder) GetSpecVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecVersion", reflect.TypeOf((*MockLearnClient)(nil).GetSpecVersion), arg0, arg1)
}

// GetAPISpecIDByName mocks base method
func (m *MockLearnClient) GetAPISpecIDByName(arg0 context.Context, arg1 string) (akid.APISpecID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPISpecIDByName", arg0, arg1)
	ret0, _ := ret[0].(akid.APISpecID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPISpecIDByName indicates an expected call of GetAPISpecIDByName
func (mr *MockLearnClientMockRecorder) GetAPISpecIDByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPISpecIDByName", reflect.TypeOf((*MockLearnClient)(nil).GetAPISpecIDByName), arg0, arg1)
}

// GetLearnSessionIDByName mocks base method
func (m *MockLearnClient) GetLearnSessionIDByName(arg0 context.Context, arg1 string) (akid.LearnSessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearnSessionIDByName", arg0, arg1)
	ret0, _ := ret[0].(akid.LearnSessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearnSessionIDByName indicates an expected call of GetLearnSessionIDByName
func (mr *MockLearnClientMockRecorder) GetLearnSessionIDByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearnSessionIDByName", reflect.TypeOf((*MockLearnClient)(nil).GetLearnSessionIDByName), arg0, arg1)
}

// GetSpecDiffTrie mocks base method
func (m *MockLearnClient) GetSpecDiffTrie(arg0 context.Context, arg1, arg2 akid.APISpecID) (*path_trie.PathTrie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecDiffTrie", arg0, arg1, arg2)
	ret0, _ := ret[0].(*path_trie.PathTrie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecDiffTrie indicates an expected call of GetSpecDiffTrie
func (mr *MockLearnClientMockRecorder) GetSpecDiffTrie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecDiffTrie", reflect.TypeOf((*MockLearnClient)(nil).GetSpecDiffTrie), arg0, arg1, arg2)
}

// MockFrontClient is a mock of FrontClient interface
type MockFrontClient struct {
	ctrl     *gomock.Controller
	recorder *MockFrontClientMockRecorder
}

// MockFrontClientMockRecorder is the mock recorder for MockFrontClient
type MockFrontClientMockRecorder struct {
	mock *MockFrontClient
}

// NewMockFrontClient creates a new mock instance
func NewMockFrontClient(ctrl *gomock.Controller) *MockFrontClient {
	mock := &MockFrontClient{ctrl: ctrl}
	mock.recorder = &MockFrontClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFrontClient) EXPECT() *MockFrontClientMockRecorder {
	return m.recorder
}

// GetServices mocks base method
func (m *MockFrontClient) GetServices(arg0 context.Context) ([]rest.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].([]rest.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices
func (mr *MockFrontClientMockRecorder) GetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockFrontClient)(nil).GetServices), arg0)
}
